#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è
–ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é API

–≠—Ç–æ—Ç —Ç–µ—Å—Ç:
1. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–ª–æ—Å—å –≤ –ë–î
4. –£–¥–∞–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ
"""

import pytest
import httpx
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.core.database import AsyncSessionLocal
from backend.entities.field.model import Field
from backend.entities.development_object.model import DevelopmentObject
from backend.entities.well.model import Well
from backend.entities.fluid.model import Fluid
from backend.entities.production.model import Production
from sqlalchemy import select


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000/api/v1"


class TestFieldEndpoint:
    """–¢–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è–º–∏"""
    
    @pytest.mark.asyncio
    async def test_create_and_delete_field(self):
        """
        –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è
        
        –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ —á–µ—Ä–µ–∑ API
        - –ü—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–∞ API
        - –ü—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        - –û—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        """
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è
        field_data = {
            "name": "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ",
            "operator": "–¢–µ—Å—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"
        }
        
        created_field_id = None
        
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{API_BASE_URL}/fields/",
                    json=field_data
                )
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            assert response.status_code == 201, f"–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 201, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            response_data = response.json()
            assert "id" in response_data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID"
            assert "name" in response_data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
            assert "operator" in response_data, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä"
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
            assert response_data["name"] == field_data["name"], "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            assert response_data["operator"] == field_data["operator"], "–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            
            created_field_id = response_data["id"]
            print(f"‚úÖ –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {created_field_id}")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
            async with AsyncSessionLocal() as session:
                # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ –ë–î
                result = await session.execute(
                    select(Field).where(Field.id == created_field_id)
                )
                db_field = result.scalar_one_or_none()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î
                assert db_field is not None, "–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î"
                assert db_field.name == field_data["name"], "–ù–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
                assert db_field.operator == field_data["operator"], "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ë–î –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
                
                print(f"‚úÖ –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {db_field.name}")
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GET API
            async with httpx.AsyncClient() as client:
                get_response = await client.get(f"{API_BASE_URL}/fields/{created_field_id}")
            
            assert get_response.status_code == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ"
            get_data = get_response.json()
            assert get_data["name"] == field_data["name"], "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            
            print(f"‚úÖ –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ GET API")
            
        finally:
            # 7. –û—á–∏—â–∞–µ–º: —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ
            if created_field_id:
                async with httpx.AsyncClient() as client:
                    delete_response = await client.delete(f"{API_BASE_URL}/fields/{created_field_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ (204 = No Content)
                assert delete_response.status_code in [200, 204], f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ: {delete_response.status_code}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î
                async with AsyncSessionLocal() as session:
                    result = await session.execute(
                        select(Field).where(Field.id == created_field_id)
                    )
                    db_field = result.scalar_one_or_none()
                    assert db_field is None, "–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î"
                
                print(f"‚úÖ –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –±–µ–∑ pytest (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
async def run_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑ pytest"""
    test_instance = TestFieldEndpoint()
    await test_instance.test_create_and_delete_field()


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π")
    print("=" * 60)
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("1. Backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
    print("=" * 60)
    
    try:
        asyncio.run(run_test())
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        sys.exit(1)
