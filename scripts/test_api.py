#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –ø–µ—Ä–µ–¥ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import aiohttp
import json

API_BASE_URL = "http://localhost:8000/api/v1"


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        try:
            async with session.get(f"{API_BASE_URL.replace('/v1', '')}/health") as response:
                if response.status == 200:
                    print("‚úÖ Health check: OK")
                else:
                    print(f"‚ùå Health check: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå Health check failed: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º enums
        endpoints_to_test = [
            ("/enums/fluid-types", "–¢–∏–ø—ã —Ñ–ª—é–∏–¥–æ–≤"),
            ("/enums/sediment-complexes", "–ö–æ–º–ø–ª–µ–∫—Å—ã –æ—Ç–ª–æ–∂–µ–Ω–∏–π"),
            ("/enums/aggregation-steps", "–®–∞–≥–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"),
            ("/fields?limit=1", "–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è")
        ]
        
        for endpoint, description in endpoints_to_test:
            try:
                async with session.get(f"{API_BASE_URL}{endpoint}") as response:
                    if response.status in [200, 404]:  # 404 –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞
                        data = await response.json()
                        print(f"‚úÖ {description}: OK (—Å—Ç–∞—Ç—É—Å {response.status})")
                    else:
                        print(f"‚ùå {description}: {response.status}")
                        return False
            except Exception as e:
                print(f"‚ùå {description} failed: {e}")
                return False
        
        print("üéâ –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–µ—Ä–µ–¥ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    success = await test_api_endpoints()
    
    if success:
        print("\n‚úÖ API –≥–æ—Ç–æ–≤ –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–º–∏!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/populate_database.py")
    else:
        print("\n‚ùå API –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω:")
        print("   cd backend && uvicorn main:app --reload")


if __name__ == "__main__":
    asyncio.run(main())
