"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç SQLAlchemy –±–µ–∑ FastAPI
"""
import asyncio
import os
import sys

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy import text

from backend.entities.analytics.service import analytics_service
from backend.shared.enums import FluidTypeEnum, AggregationStepEnum
from datetime import date

# –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
TEST_DATABASE_URL = "postgresql+asyncpg://postgres:postgres@localhost:5432/test"
test_engine = create_async_engine(TEST_DATABASE_URL, echo=False)
TestAsyncSessionLocal = async_sessionmaker(bind=test_engine, class_=AsyncSession, expire_on_commit=False)


async def direct_test():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    
    async with TestAsyncSessionLocal() as db_session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        result = await db_session.execute(text("SELECT COUNT(*) FROM production"))
        count = result.scalar()
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ production: {count}")
        
        if count > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ñ–ª—é–∏–¥–æ–≤
            result = await db_session.execute(text("SELECT DISTINCT fluid_type FROM production"))
            fluid_types = result.scalars().all()
            print(f"üß™ –¢–∏–ø—ã —Ñ–ª—é–∏–¥–æ–≤ –≤ –ë–î: {list(fluid_types)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è enum'–æ–≤
            print(f"üè∑Ô∏è  FluidTypeEnum.GAS = {FluidTypeEnum.GAS}")
            print(f"üè∑Ô∏è  FluidTypeEnum.GAS.value = '{FluidTypeEnum.GAS.value}'")
            print(f"üè∑Ô∏è  AggregationStepEnum.YEARLY = {AggregationStepEnum.YEARLY}")
            print(f"üè∑Ô∏è  AggregationStepEnum.YEARLY.value = '{AggregationStepEnum.YEARLY.value}'")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å...")
            try:
                result = await analytics_service.get_production_dynamics(
                    db=db_session,
                    date_from=date(2021, 1, 1),
                    date_to=date(2023, 12, 31),
                    fluid_type=FluidTypeEnum.GAS,
                    aggregation_step=AggregationStepEnum.YEARLY
                )
                
                print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π: {result.metadata.response.total_fields}")
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥–æ–≤: {result.metadata.response.total_periods}")
                print(f"üìà –û—Ç—á–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã: {result.reporting_dates}")
                
                for field in result.fields:
                    print(f"üè≠ {field.field_name}: {field.production_by_period}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ: {e}")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    await test_engine.dispose()


if __name__ == "__main__":
    asyncio.run(direct_test())
