"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
"""
import asyncio
import os
import sys

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy import text, select

from backend.entities.production.model import Production
from backend.shared.enums import FluidTypeEnum

# –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
TEST_DATABASE_URL = "postgresql+asyncpg://postgres:postgres@localhost:5432/test"
test_engine = create_async_engine(TEST_DATABASE_URL, echo=True)
TestAsyncSessionLocal = async_sessionmaker(bind=test_engine, class_=AsyncSession, expire_on_commit=False)


async def debug_data():
    """–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")
    
    async with TestAsyncSessionLocal() as db_session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ production
        result = await db_session.execute(text("SELECT COUNT(*) FROM production"))
        count = result.scalar()
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ production: {count}")
        
        if count > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ñ–ª—é–∏–¥–æ–≤
            result = await db_session.execute(text("SELECT DISTINCT fluid_type FROM production"))
            fluid_types = result.scalars().all()
            print(f"üß™ –¢–∏–ø—ã —Ñ–ª—é–∏–¥–æ–≤ –≤ –ë–î: {list(fluid_types)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –∑–Ω–∞—á–µ–Ω–∏—è
            print(f"üè∑Ô∏è  FluidTypeEnum.GAS.value = '{FluidTypeEnum.GAS.value}'")
            print(f"üè∑Ô∏è  FluidTypeEnum.GAS = {FluidTypeEnum.GAS}")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for test_value in ['–≥–∞–∑', 'GAS', FluidTypeEnum.GAS.value, FluidTypeEnum.GAS]:
                try:
                    query = select(Production).where(Production.fluid_type == test_value).limit(1)
                    result = await db_session.execute(query)
                    record = result.scalar_one_or_none()
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å '{test_value}' ({type(test_value)}): {'–Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å' if record else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                except Exception as e:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å —Å '{test_value}' ({type(test_value)}): –æ—à–∏–±–∫–∞ - {e}")
    
    await test_engine.dispose()


if __name__ == "__main__":
    asyncio.run(debug_data())
